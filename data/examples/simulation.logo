set :width 600
set :height 400

to getxcoord [:t:w:h] [
  set :t - :t 1
  %:t:w
]

to getycoord [:t:w:h] [
  set :t - :t 1
  set:t -:t %:t:w
  /:t:h
]

to turtledown [:t:dr:dc] [
  set :h :turtleheight
  set :w :turtlewidth
  set :x ( + getxcoord :t:w:h :dc  )
  set :y ( + getycoord :t:w:h :dr  )
  set :valid 1
  set :valid and :valid less? :x :w
  set :valid and :valid less? :y :h
  set :valid and :valid greater? :x -1
  set :valid and :valid greater? :y -1
  if [:valid] [
    set :t ( + *:y:turtlewidth :x 1 )
    tell[:t]
    set :ret equal? heading 180
    tell[]
    :ret
  ]
]

to setup [:w:h][
  cs
  setpalette 9 255 255 255
  setbg 9
  repeat *:w:h [tell[:repcount]]
  askwith [1] [pu]
  repeat *:w:h [
    tell [:repcount]
    set :x getxcoord :repcount:w:h
    set :y getycoord :repcount:w:h
    set :xdiv / :width :turtlewidth
    set :ydiv / :height :turtleheight
    set :x - + * :x :xdiv /:xdiv 2 /:width 2
    set :y - + * :y :ydiv /:ydiv 2 /:height 2
    setxy:x:y
  ]
  tell[]
]

to plan [] [
  seth + heading 90
  repeat turtles [
    set:t:repcount
    tell[:t]
    set:down 0
    set :down +:down turtledown:t -1 0
    tell[:t]
    set :down +:down turtledown:t 0 1
    tell[:t]
    set :down +:down turtledown:t 1 0
    tell[:t]
    set :down +:down turtledown:t 0 -1
    tell[:t]

    ifelse [% heading 180] [] [
      if [:down] [pd]
    ]
  ]
  tell[]
  :down
]

to update [] [
  repeat turtles [
    set:t:repcount
    tell[:t]
    ifelse [% heading 180] [seth + heading 90] [if [pendown?] [pu seth 180]]
  ]
  tell[]
]

to step [] [
  plan
  update
]

set :turtleheight 4
set :turtlewidth 4
setup :turtlewidth :turtleheight